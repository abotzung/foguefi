#============================================================================
#                F O G    P R O J E C T    v 1 . x . x . x
#                       Unofficial Secure Boot Patch
#                 FOGUefi (https://github.com/abotzung/foguefi)
#
# Auteur       : Alexandre BOTZUNG [alexandre.botzung@grandest.fr]
# Version      : 20240708
#============================================================================
# grub.cfg
#   Configure le démarrage de GRUB (en mode EFI) 
#============================================================================
# VARIABLES GLOBALES
#============================================================================
# = URL du serveur FOG ($net_default_server est l'adresse IP du serveur TFTP)
if [ -z "$FOG_serverIP" ]; then set FOG_serverIP="${net_default_server}"; fi
# = Paramétrage de la source des images (valide uniquement en cas de démarrage TFTP/Disque)
if [ -z "$FOG_storageIP" ]; then set FOG_storageIP="${FOG_serverIP}"; fi
if [ -z "$FOG_storagePATH" ]; then set FOG_storagePATH="/images/"; fi
# GRUB (_signed all) ; mets l'adresse MAC de la carte réseau dans la variable $mac
if [ -z "$mac" ]; then set mac="${net_default_mac}"; fi

# Changez ici le timeout du menu GRUB a votre convenance.
set timeout=5
set GRUB_RECORDFAIL_TIMEOUT=5

# En cas de problèmes avec le serveur HTTP, quel keymap dois-je utiliser ?
set backup_keymap="us"


grub_parameter=''
# Ajoutez ici les paramètres a ajouter au kernel a chaque démarrage
# ------- v -- v -- v ---------------------------------------------
# == TIMEOUT des boîtes de dialogue du menu intégré de FOG Stub. (par défaut : 900 secondes / 15 minutes)
grub_parameter="${grub_parameter} FOG_DialogTimeout=30"
# == Activation de VNC
grub_parameter="${grub_parameter} enablevnc=yes"
# == Mode de compatibilité vidéo (ne change pas de mode vidéo)
grub_parameter="${grub_parameter} nomodeset"
# == Modifie le mot de passe root afin de pouvoir déboguer FOS (par l'adresse MAC du système => 01:fa:da:de:ca:fe)
grub_parameter="${grub_parameter} changerootpwd=no"


# Exemple : 
# ----- Modifier la bannière de démarrage (similaire à FOG Rebranding) (ne pas mettre de signes diacritiques) :
# grub_parameter="${grub_parameter} FOG_rebranding_banner=\"ACME Networks\""

# ----- Replacer la bannière de démarrage (ne pas mettre de signes diacritiques):
# grub_parameter="${grub_parameter} FOG_rebranding_software=\"ACME Systems integrated GmbH\""

# ----- Configure le nom d'utilisateur et le mot de passe :
# grub_parameter="${grub_parameter} FOG_username=usr-demo"
# grub_parameter="${grub_parameter} FOG_password=acme2012"

# ----- Forcer la sélection d'une image par défaut lors d'une mastérisation :
# grub_parameter="${grub_parameter} FOG_imageID=42"

# ----- Forcer le nom de session multicast à utiliser pour une remastérisation multicast : 
# grub_parameter="${grub_parameter} FOG_multicastSessionName=salle_informatique

# ----- Choisir une tâche spécifique (uniquement pour une remastérisation sans manipulation): 
# grub_parameter="${grub_parameter} menutype=<QUELQUECHOSE>"
#
# <QUELQUECHOSE> peut être : 
#  down  -> Téléchargement de l'image (nécessite la variable FOG_imageID)
#  askmc -> Participation à une session multicast (nécessite la variable FOG_multicastSessionName)
#  unreg -> Retrait du pc de FOG (interactif seulement)
#  approvehost -> Approuver l'hôte dans FOG (interactif seulement)
#  updatekey -> Mettre à jour la clé produit (interactif seulement)
#  memtester -> Teste sommairement la mémoire
#
#  Toutes ces fonctionnalités nécessite de pouvoir s'authentifier au serveur FOG à l'exception de memtester. (FOG_username/FOG_password)
#  Le plugin "Access Control" permet de limiter le pouvoir d'un compte de maintenance dans FOG.

# URI pour accéder au serveur FOG (par défaut : fog/)
set http_FOGpath="fog/"
set http_path=(http,$FOG_serverIP)/${http_FOGpath}service/grub

# Dossier partagé contenant les fichiers aussi disponible en tftp
set http_bootpath=$http_path/tftp/
set bootpath=$http_bootpath
# Page web contenant les menus GRUB
set http_grub_bootpage=$http_path/grub.php
# Page web permettant de tester la connectivitée https
set httpsredir_grub_bootpage=$http_path/grub_https.php


set httpproto="http"
# Drapeau utilisée par grubbootmenu.class.php
if [ -z "$FOG_httpproto" ]; then set FOG_httpproto="http"; fi

# Définis par défaut par le mode de démarrage courant. (hd0), (tftp, X.X.X.X),...
set tftp_root="(${root})"
set tftp_bootpath=$tftp_root/

# !!! Dans le cas où le démarrage HTTP pose problème, décommentez la ligne ci-dessous !!!
# Ligne décommenté car [Romu] m'a remonté de multiples dysfonctionnements sur des PC (entre 2013 - 2018 principalement)
set bootpath=$tftp_bootpath

# NOTE : $bootpath est utilisée par le serveur FOG pour déterminer le chemin pour chercher le kernel Linux && l'Initrd

insmod http
#============================================================================

# Charge les polices pour le thème
loadfont $prefix/theme/helv_md_12.pf2
loadfont $prefix/theme/helv_md_14.pf2
loadfont $prefix/theme/helv_md_18.pf2
loadfont $prefix/theme/helv_bd_18.pf2
loadfont $prefix/theme/ascii.pf2
set theme=$prefix/theme/theme.txt


GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT_STYLE=hidden

set gfxmode=auto
set gfxterm_font="Unifont Regular 16"


terminal_output gfxterm

set color_normal=white/black
set menu_color_normal=white/black
set menu_color_highlight=black/white

if background_color 0,0,0; then
  clear
fi

echo "Please wait while loading GRUB menu..."

set linux_gfx_mode=keep
export linux_gfx_mode


# GRUB Ubuntu : grub-efi-amd64-signed (https://packages.ubuntu.com/jammy/grub-efi-amd64-signed)
# L'amorçage de GRUB avec Secure Boot nécessite shim-signed (https://packages.ubuntu.com/jammy/shim-signed)
# GRUB Ubuntu seulement ; mets l'uuid dans la variable $uuid
smbios --type 1 --get-uuid 8 --set uuid


if [ -z "$GRUB_Fastboot" ]; then set GRUB_Fastboot=0; fi
if [ -z "$testconn" ]; then set testconn=0; fi

if [ "$GRUB_Fastboot" -eq 0 ]; then
	# GRUB n'a pas la capacité de réaliser des opération arithmériques. Dommage
	set moncompteur=0
	set testconn=0
	until test "$moncompteur" -eq 3; 
	do 
		echo "-> Please wait while initiating communication with the server... ($moncompteur/3)"

		# In some rares cases, GRUB cannot communicate immediately with http.
		# The present workaround consist of retrying "source" this webpage, with internally raise the variable testconn to 1.
		# Else, after 4 tries, the menu switch to a more reliable tftp way. The downside is loosing the dynamic menu.
		#
		set color_normal=black/black
		source "$http_grub_bootpage?testconn=1"
		set color_normal=white/black
	  
		if [ "$testconn" -eq 1 ]; then
			# On a de la connectivitée, on quitte la boucle
			set moncompteur=3
		fi
	  
		# Un compteur (sans capacité arithmérique) pour looper 4x.
		#   Dans le cas où il est impossible de charger le menu, on bascule sur une version de secours. (TFTP)
		if [ "$moncompteur" -eq 3 ]; then
			#set testconn=1
			set timeout=3
		fi
		if [ "$moncompteur" -eq 2 ]; then
			set moncompteur=3
		fi
		if [ "$moncompteur" -eq 1 ]; then
			set moncompteur=2
		fi
		if [ "$moncompteur" -eq 0 ]; then
			set moncompteur=1
		fi
	  
	done


	# VIKUNJA #5 GRUB - [BUG] - Ajout de la détection de HTTP / HTTPS dans GRUB
	# Ok, on viens d'établir que GRUB possède une connectivité fonctionnelle vers le serveur web.
	#	Tâchons de déterminer si le serveur fonctionne en HTTPS ou HTTP.
	# Table de vérité : 
	#   source "$..." du fichier	|	Protocole	|	testconn=1 ? 
	# 	HTTP	(grub.php)	 			renvoie toujours 1 (sauf si le serveur web est injoignable OU QUE Grub refuse de fonctionner)
	#	HTTPS	($httpsredir_grub_bootpage)	renvoie 1 si le serveur est en HTTP.
	#									 En HTTPS, le drapeau restera à 0 (car 301 permanent redirect vers https)			
	# Note : "FOGCore::$httpproto" ne fonctionne pas ; cette fonction utilise les entêtes provenant de la requête initiale.

	if [ "$testconn" -eq 1 ]; then
		# Si on a initialement de la connectivitée, teste le mode https
		# Pour cela, redescends le drapeau.
		echo "Testing https communication..."
		set testconn=0
		
		# "source" le drapeau de test, indisponible en https mais dispo en http
		set color_normal=black/black
		source "$httpsredir_grub_bootpage?testconn=1"
		set color_normal=white/black
		
		# Dans le cas d'un serveur web avec HTTPS activée par défaut, ce fichier ($httpsredir_grub_bootpage) n'est pas dans la liste
		#   des rêgles. Par conséquent, Apache répondra avec un code HTTP 301 vers sa version HTTPS. 
		# Je me base sur le fait que GRUB ne : suit pas les HTTP301 et ne supporte pas HTTPS.
		
		if [ "$httpproto" == "https" ]; then
			# On a quand même le drapeau https, cela veut dire que GRUB a peut-être été upgradée !
			# Note set httpproto="https"
			#      set testconn=1
			FOG_httpproto="https"
		else
			if [ "$testconn" -eq 1 ]; then
				# Le drapeau est levé, on a de l'HTTP (80)
				set FOG_httpproto="http"
				set httpproto="http"
			else
				# Le drapeau n'est pas levée, on a de l'HTTPS. (443) (Vu que testconn à été testée + haut avec succès)
				set FOG_httpproto="https"
				set httpproto="https"
				set testconn=1
			fi
		fi
		

	else
		echo "Cannot communicate with FOG Server !"
		echo "Dropping you to a TFTP version of FOG Stub."
		sleep 10
	fi
fi


if background_color 22,35,51; then
	clear
fi



#
# Exemple d'automatisation de remastérisation à l'aide de FOG Stub & GRUB
#   Dans cet exemple, si l'adresse mac commence par "01:ca:fe"* (01:ca:fe:12:34:56)
#    le programme "FOG-O-Matic" est automatiquement programmée (nom programmable)
#
#if [ "$mac" -eq "01:ca:fe"* ]; then
#	menuentry "FOG-O-Matic" --class fogauto fogomatic {
#		echo "Loading kernel..."
#		linuxefi  ${tftp_bootpath}linux_kernel loglevel=4 keymap=fr web=http://${FOG_serverIP}/fog/ storage=${FOG_serverIP}:/images/ storageip=${FOG_serverIP} nvme_core.default_ps_max_latency_us=0 consoleblank=0 $grub_parameter FOG_username=usr-demo FOG_password=acme2012 FOG_imageID=42 menutype=down shutdown=1
#		echo "Loading initrd..."
#		initrdefi ${tftp_bootpath}fog_uefi.cpio.xz
#		echo "Booting kernel, please wait."
#	}
#	set testconn=2
#fi




echo "Loading menu..."

if [ "$testconn" -eq 1 ]; then
	normal "$http_grub_bootpage?mac=$mac&uuid=$uuid"
	# If loading succeed, theses menuentries below are not loaded.
fi

if [ "$testconn" -eq 0 ]; then
	menuentry "Boot from hard disk" --class drive-harddisk boothardisk {
		echo "Booting first local disk..."
		# Generate boot menu automatically
		configfile ${prefix}/boot-local-efi.cfg
		# If not chainloaded, definitely no uEFI boot loader was found.
		echo "No uEFI boot loader was found!"
		sleep 10
	}

	menuentry "FOG Stub" --class fog fogemergency {
		echo "Loading kernel..."
		linux  ${tftp_bootpath}linux_kernel loglevel=4 keymap=${backup_keymap} web=${FOG_httpproto}://${FOG_serverIP}/fog/ storage=${FOG_storageIP}:${FOG_storagePATH} storageip=${FOG_storageIP} nvme_core.default_ps_max_latency_us=0 consoleblank=0 $grub_parameter
		echo "Loading initrd..."
		initrd ${tftp_bootpath}fog_uefi.cpio.xz
		echo "Booting kernel, please wait."
	}
fi
